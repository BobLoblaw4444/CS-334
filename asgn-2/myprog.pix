#version 120 // -*- c++ -*-
/**
 Per-Pixel Shading Program

 @file myprog.vrt
 @by Daniel Aliaga, mostly based on code by Morgan McGuire
 */

/////////////////////////////////////////////////////////////
// "Uniform" constants passed from C++

/** Intensity of the diffuse term. */
uniform float   diffuseScalar;

/** Diffuse/ambient surface color */
uniform vec3    diffuseColor;

/** Intensity of the specular term. */
uniform float   specularScalar;

/** Specular surface color.  Used for both glossy and perfect reflection. */
uniform vec3    specularColor;

/** Phong exponent; 100 = sharp highlight, 1 = broad highlight */
uniform float   shine;

/** Intensity of perfect reflections */
uniform float   reflect;

/** Intensity of bump mapping */
uniform float   bumpiness;

/** Intensity of displacement mapping */
uniform float   displacement;

/** Intensity of light mapping */
uniform float   modulation;

/** Unit world space direction to the (infinite, directional) light source */
uniform vec3    wsLightDir;

/** Light position **/
uniform vec3    wsLightPos;

/** Color of the light source */
uniform vec3    lightColor;

/** Ambient light term. */
uniform vec3    ambient;

/** Environment cube map used for reflections */
uniform samplerCube environmentMap;

/** Modulates the environment map values to simulate darkness or increase
   dynamic range when tone mapping. */
uniform float   environmentConstant;

/** Bump map **/
uniform sampler2D bumpMap;
uniform sampler2D displacementMap;
uniform sampler2D modulationMap;


/////////////////////////////////////////////////////////////
// "Varying" variables passed from the vertex shader

varying vec3    wsInterpolatedNormal;
varying vec3    wsInterpolatedEye;
varying vec3    tan_X, tan_Y, tan_Z;
varying vec2    texCoord;


void main() {

    // Unit normal in world space
    vec3 wsNormal = normalize(wsInterpolatedNormal);

	// Unit vector from the pixel to the eye in world space
    vec3 wsEye = normalize(wsInterpolatedEye);

	// Take the normal map values back to (-1, 1) range to compute a tangent space normal

    vec3 tsN = texture2D(bumpMap, texCoord).xyz * 2.0 + vec3(-1.0, -1.0, -1.0);
	
	// Compute tangent to world matrix using tan_XYZ vectors; note that the columns might be slightly non-orthogonal due to interpolation but this is ok
    mat3 tangentToWorld = mat3(tan_X, tan_Y, tan_Z);

    // Take the normal to world space
    vec3 wsN = (tangentToWorld * tsN);

    // For very tiny geometry the tangent space can become degenerate and produce a bad normal (this is due to bad tangent vector computations)
    wsN = (dot(wsN, wsN) > 0.001) ? wsN : tan_Z;
	
	vec3 disMap = texture2D(displacementMap, texCoord).xyz;

	// find the new normal by interpolating between the world normal and tangent normal based on the bumpiness value
	wsNormal = (wsNormal * (1-bumpiness)) + (normalize(wsN) * bumpiness) + (normalize(disMap) * displacement * .01);

	// Unit vector giving the direction of perfect reflection into the eye
    vec3 wsReflect = 2.0 * dot(wsEye, wsNormal) * wsNormal - wsEye;

	// The "reflect" function is part of the GLSL specification but some NVIDIA drivers do not include it.
    // If you wanted to use that function, you could use the following line instead of the above computation
    // vec3 wsReflect = -reflect(wsEye, wsNormal);
    	
	vec3 modulationVec = texture2D(modulationMap, texCoord).xyz;
	float light = length(modulationVec) * modulation;
	
	// now, compute the actual fragment/pixel color as a combination of diffuse, specular, and reflection mapping
    gl_FragColor.rgb =
        diffuseScalar  * diffuseColor  * (ambient + (max(dot(wsNormal, wsLightDir), 0.0) * lightColor)) +
        specularScalar * specularColor * (8.0 + shine) / 8.0 * pow(max(dot(wsReflect, wsLightDir), 0.0), shine) * lightColor +
        reflect        * specularColor * textureCube(environmentMap, wsReflect).rgb * environmentConstant;

	gl_FragColor.rgb += light;
}
