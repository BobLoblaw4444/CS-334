/**
 Per-Vertex Shading Program

 @file myprog.vrt
 @by Daniel Aliaga, mostly based on code by Morgan McGuire
 */

attribute vec4 g3d_Vertex;
attribute vec3 g3d_Normal;
attribute vec2 g3d_TexCoord0;
attribute vec4 g3d_TexCoord1;

/** Camera origin in world space */
uniform vec3 wsEyePosition;

/** Non-unit vector to the eye from the vertex */
varying vec3 wsInterpolatedEye;

/** Non-unit surface normal in world space */
varying vec3 wsInterpolatedNormal;

/** tangent space vector **/
varying vec3 tan_X, tan_Y, tan_Z;

/** tex coords */
varying vec2 texCoord;

void main(void) {

    // Standard stuff
    wsInterpolatedNormal = g3d_ObjectToWorldNormalMatrix * g3d_Normal;
    wsInterpolatedEye    = wsEyePosition - (g3d_ObjectToWorldMatrix * g3d_Vertex).xyz;
    gl_Position          = g3d_ModelViewProjectionMatrix * g3d_Vertex;

	// N vector:
	tan_Z = g3d_ObjectToWorldNormalMatrix * g3d_Normal.xyz;

	// T vector (note: g3d_MultiTexCoord1 is computed by G3D to be the tangent vector; always computed with ArticulatedModels)
	tan_X = (g3d_ObjectToWorldMatrix * vec4(g3d_TexCoord1.xyz, 0)).xyz;

	// B vector (note: T and N are guaranteed perpendicular and unit length; its facing direction is stored in the texcoord w component)
    tan_Y = cross(tan_Z, tan_X) * g3d_TexCoord1.w;

	// set texcoord variable (note: gl_MultiTexCoord0 has the actual texcoords of the inputted model file, assuming they have them)
	texCoord = g3d_TexCoord0.st;
}
